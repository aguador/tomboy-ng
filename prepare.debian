#!/bin/bash
# copyright David Bannon, 2019, 2020, use as you see fit, but retain this statement.
#

# This script takes a tomboy-ng zip file from github, and prepares things to
# build a source deb suitable for Creating or UPDATING an existing one in Debian Repo.
# If its a new release of tomboy-ng, then the create mode works, provide -n to 
# have the script create a new .orig file.
# If we are fixing a Debian Packaging issue, use the Update mode, no switch but
# make sure the original .orig.tar.gz file is present.

# -------------------- Making a Debian SRC ----------------------
# To build a Debian Source Package, on eg a current Bullseye -
# 	Install fpc, lazarus, libnotifier-dev, devscripts and ? libqt6pas-dev
#	Ensure appropriate pgp key in place ($HOME/.gnupg), see below 
#	In an otherwise empty directory, we need -
#	prepare.debian, tomboy-ng-master.zip and possibly the first uploaded .orig file -
#	tomboy-ng_0.31a-1.orig.tar.gz (either one squirreled away or downloaded from Debian)
#	Following commands help -
#	
#	wget https://raw.githubusercontent.com/tomboy-notes/tomboy-ng/master/prepare.debian
#	wget https://github.com/tomboy-notes/tomboy-ng/archive/master.zip
#	mv master.zip tomboy-ng-master.zip

# 	Unless you are me, edit the script, DEBFULLNAME and DEBEMAIL _OR_ have env set 
#	bash ./prepare.debian -D unstable -n
#	cd tomboy-ng_XXXX                       // Whatever the name is at this stage....
#	debuild -S
#	The files you want are in ../.
#	You probably should do a practise build and lintian run, see other notes.
#	Upload with "dput -f mentors *.changes"

# -------------------- Signing Details -------------------------
# Below are hardwired my personal full name and tomboy-ng email address. These
# will only be used if relevent env vars are empty. Note that they
# must match whats available in a gpg key. AND if that does not match
# the Maintainer: entry from control, we get a non maintainer upload warning.
#
# 
# -------------------- Overview --------------------------------
# This script will generate the 'changes' between a current version and the .orig file
# uploaded in December 2020. That way, only the changes need be uploaded in future.
# The (very important) changelog will be updated, but still references the original
# upload (unlike the Ubuntu PPA script). 
# We are doing only Qt5 for Debian, they don't want any more GTK2 stuff.

# ------------------- Fiddling -----------------------------
# Sometimes its necessary to 'reupload' a version dut to some problem being 
# discovered after release. This problem can be one of two sorts -
# 1. An Debian packaging issue. In this case the tomboy-ng code is unchanged
#    and we fiddle the packaging. The -1 in the version number should be 
#    reved to -2 (etc), edit the constant below.
# 2. A tomboy-ng code issue (oh dear!). In this case, we need to change the
#    tomboy-ng release number by adding or incrementing a letter after the number.
#    The change, eg from 0.32 to 0.32a is made in the github repo, not here and
#    a new zipball is downloaded. The script will spot the change and act 
#    accordingly.
# 
# David Bannon, July 2020
# History -
#	2020-09-02 Added -D distro switch
#       2020-12-17 Restructed the multi control system to make it clearer.
#       2020-12-29 Split script into seperate Debian one, only Qt5.

APP="tomboy-ng"
# These are mine, they are used as defaults if NOT set in env. Ignored unless signing.
DEF_EMAIL="tomboy-ng@bannons.id.au"	# This matches cert I use to sign tomboy-ng stuff
DEF_FULLNAME="David Bannon"		# and this ...
UBUNTU_FULLNAME="tomboy-ng"		# My stuff up, different cert with different name in Ubuntu PPA !
DEBVER="-3"				# Package version, not source, starts at 1

# Housekeeping stuff, helpers for debugging etc. Set with command line, not here !
VER="unknown"
LAZ_BLD=""
UFILES="NO"	# debug tool, update Makefile
CLEAN="NO"	# debug tool, remove files from previous run, assume same ver.
#WIDGET=""	# empty says make a GTK2, only other possibility is Qt5
DEBIANREPO=""   # If YES, we are making a package going into Debian Repo, else Ubuntu ?      
QT5INNAME=""	# May have content we add to qt5 package name (when -Q) 

	# Looks for fpc and lazbuild on PATH, if in root space, do nothing,
	# if in user space, because debuild will miss them, makes two files.
function CheckFPC_LAZ () {
	FPC=`which fpc`
	if [ -x "$FPC" ]; then
		PREFIX="${FPC:0:4}"
		if [ "$PREFIX" = "/usr" ]; then
			echo "---------- root space fpc, all good"
		else
			echo "---------- Leaving a fpc file for buildit"
			echo "$FPC" > WHICHFPC
		fi
	else
		echo "----------- ERROR, no fpc found ------------"
		exit 1
	fi
	if [ "$LAZ_BLD" = "" ]; then 	# we had better try to find it		
		LAZ_BLD=`which lazbuild`
	fi
	if [ -x "$LAZ_BLD" ]; then
		PREFIX="${LAZ_BLD:0:4}"
		if [ "$PREFIX" = "/usr" ]; then
			echo "---------- root space Lazarus, all good"
		else
			echo "---------- Leaving a lazbuild file for buildit"
			echo "$LAZ_BLD" > WHICHLAZ
		fi
	else
		echo " --- ERROR, no lazbuild found, try -l ? ---"
		exit 1
	fi
}

	# Here we remove file that are not needed in the Debian SRC kit.
function CleanSource () {
	rm -Rf experimental
	rm -Rf patches
	rm -Rf doc/gallery
	rm -Rf doc/html
	rm -Rf doc/wiki
	rm -Rf po/*.mo
	rm -f  doc/*.svg doc/*.png doc/*.note
	rm -f  glyphs/*.png glyphs/*.ico glyphs/*.svg glyphs/*.icns
	rm -fR glyphs/help
	rm -fR glyphs/demos
	KC="kcontrols"
	KCS="$KC/source"
	rm -fR "$KC"/demos 
	rm -fR "$KC"/help
	rm -Rf "$KC"/packages kcontrols/tools 
	rm -Rf "$KC"/resource_src/khexeditor_icons "$KC"/resource_src/kgrid_icons
	rm "$KCS"/kbuttons.pas "$KCS"/kdbgrids.pas "$KCS"/kgrids.* "$KCS"/kicon.pas 
	rm "$KCS"/klabels.pas "$KCS"/kmemodlg*.* "$KCS"/kxml.pas "$KCS"/kwidewinprocs.pas
	rm "$KCS"/kmemofrm.* "$KCS"/kpagecontrol.* "$KCS"/kprogress.* "$KCS"/ksplitter.pas  
	rm "$KC"/*.txt "$KC"/*.json "$KC"/*.bat
	rm -Rf "$KC"/packages "$KC"/tools "$KC"/resource_src/khexeditor_icons "$KC"/resource_src/kgrid_icons
}


function KControls () {	
	if [ -e "kcontrols-master.zip" ]; then
		echo "---------- Note: reusing KControls zip"
	else
		wget https://github.com/kryslt/KControls/archive/master.zip   # watch this name does not change.
		mv master.zip kcontrols-master.zip
	fi
	unzip -q kcontrols-master.zip
	# rm -f master.zip
	mv KControls-master "$APP"_"$VER""$DEBVER"/kcontrols
}

function ShowHelp () {
    echo " "
    echo "Prepares to generate changes from existing .orig file in Debian."
    echo "Assumes FPC of some sort in path, available and working, ideally 3.2.0."
    echo "Needs Lazarus, <=2.0.6 in root space or specified with -l option."
    echo "Needs devscripts preinstalled and maybe an edit of email address above if"
    echo "Requires the existing .orig file, an current tomboy-ng-master.zip"
    echo "Will download kcontrols, cleanup and prepare to run debuild -S"
    echo "David Bannon, December 2020" 
    echo "-h   print help message"
    echo "-l   a path to a viable lazbuild, eg at least where lazbuild and lcl is."
    echo "-C   clean deb files from previous run, exit, debug use only, Unreliable"
    echo "-D   distro, eg unstable, bullseye"
    echo "-n   New orig file, required for fresh release"
    echo ""
    echo "     Typically     bash ./prepare.debian -D unstable -n
    exit
}

function MakeOrigFile () {
    echo "---------- Creating a new .orig file"
    # We move most of the debian dir out of harms way and tar up the dir.
	# We have to do this to avoid the dreaded lintian no-debian-changes
	# The copyright file in there alone does not generate that error ??
	# But before moving it, we will create a new changelog
	# cd "$APP"_"$VER""$DEBVER"
	rm debian/changelog                     # Must have a new changelog if new orig file
	dch "$DISTRO1" "$DISTRO2" --create --package="$APP" --newversion="$VER""$DEBVER" "New Version Release"
	dch --append "Please see github for change details"
    dch --release "blar"
	cd ..
	mv "$APP"_"$VER""$DEBVER"/debian ./debian
	mkdir "$APP"_"$VER""$DEBVER"/debian
	cp debian/copyright "$APP"_"$VER""$DEBVER"/debian/.
	tar czf "$APP"_"$VER".orig.tar.gz "$APP"_"$VER""$DEBVER"
	# OK, we now have our .orig. file, put most of it back.
	rm -Rf "$APP"_"$VER""$DEBVER"/debian
	mv ./debian "$APP"_"$VER""$DEBVER"/. 
}

while getopts "hUCl:D:n" opt; do
  case $opt in
    h)
      ShowHelp
      ;;
    l)
	LAZ_BLD="$OPTARG"
	;;
    C)
	CLEAN="YES"
	;;
    D)
	DISTRO1="-D""$OPTARG"
	DISTRO2="--force-distribution"
	;;
	n)
	NEWORIG="YES"
	;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ShowHelp
      ;;
  esac
done

echo "---------- laz_bld is $LAZ_BLD"
echo "---------- CLEAN is $CLEAN"
echo "---------- UFILES is $UFILES"

rm -f WHICHFPC WHICHLAZ		

if [ ! -f tomboy-ng-master.zip ]; then
	echo "---------- Downloading a new tomboy-ng"
	wget https://github.com/tomboy-notes/tomboy-ng/archive/master.zip
	mv master.zip tomboy-ng-master.zip
fi

if [ -f tomboy-ng-master.zip ]; then
	CheckFPC_LAZ
	# In practise, we should have these env set, my defaults just in case. 
	if [ "$DEBEMAIL" = "" ]; then
		DEBEMAIL="$DEF_EMAIL"
		export DEBEMAIL
	fi
	if [ "$DEBFULLNAME" = "" ]; then
		DEBFULLNAME="$DEF_FULLNAME"
		export DEBFULLNAME
	fi
	if [ "$CLEAN" = "YES" ]; then
		rm -Rf "tomboy-ng-master"		# probably not here anyway ....
	fi
	unzip -q tomboy-ng-master.zip
	VER=`cat tomboy-ng-master/package/version`
	if [ "$CLEAN" = "YES" ]; then
		echo "---------- Removing existing DEB files"
		rm -Rf "$APP"_"$VER"-?

		#rm -f "tomboy-ng_""$VER"".orig.tar.gz"
		rm -f "tomboy-ng_$VER-"?_amd64.buildinfo
		rm -f "tomboy-ng_$VER-"?_amd64.changes
       	rm -f "tomboy-ng_$VER-"?_amd64.deb
 		rm -f "tomboy-ng_$VER-"?.debian.tar.xz
		rm -f "tomboy-ng_$VER-"?.dsc
		#rm -f "tomboy-ng_$VER.orig.tar.gz"
		exit
	fi
	mv "tomboy-ng-master" "$APP"_"$VER""$DEBVER"
	KControls
	cd "$APP"_"$VER""$DEBVER"
	CleanSource
	# cd ..
	if [ "$NEWORIG" = "YES" ]; then
	    MakeOrigFile                    # create new .orig and a new changelog 
	else
		dch -v "$VER""$DEBVER" "$DISTRO1" "$DISTRO2" "Release of new version"    
	fi
	cd "$APP"_"$VER""$DEBVER"

	mv debian/control.qt5-DEBIAN debian/control
	rm -f debian/control.qt5
	rm -f debian/rules.qt5

	touch Qt5
	cd ..

	echo "If no errrors, you should now cd ""$APP"_"$VER""$DEBVER""; debuild -S"
else
	echo ""
	echo "   Sorry, I cannot see a tomboy-ng-master.zip file. This"
	echo "   script must be run in a directory containing that file"
	echo "   (obtained from github) and probably little else."
	echo "   If you used wget to download tomboy-ng, it will be named master.zip,"
	echo "   you should rename it tomboy-ng-master.zip to avoid confusion."
	echo ""
fi



