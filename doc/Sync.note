<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>tomboy-ng Sync Process</title>
  <text xml:space="preserve"><note-content version="0.1"><underline>tomboy-ng Sync Process</underline>

This is how I implemented tomboy-ng's sync process. Its NOT a design document for the Tomboy's Sync but about as close as we can get.  Text in italics relates to how its implemented in tomboy-ng, other text is broad plan.<size:huge>

How Sync Works</size:huge>

Data is drawn from three sources during a sync, the Local Manifest file, the local notes themselves and the remote notes on a server, another file system or, whatever. In file sync, the remote notes are sumarised by the remote manifest file that contains data about the notes it holds and sync data such as a unique ID and a last sync date.

<italic>MainMetaData is a TNoteInfoList that -
</italic><list><list-item dir="ltr"><italic>is first loaded up with details of the  Remote Notes (if they exist), by LoadRemoteRepoData(). It calls a Trans function that may read a remote manifest file or get a list of remote notes some other way.</italic></list-item></list><italic>
</italic><list><list-item dir="ltr"><italic>CheckUsingLCD() then scans physical (on disk) notes, marking entries in MainMetaData as either clashes or do-nothing becasue they are same note.</italic></list-item></list><italic>
</italic><list><list-item dir="ltr"><italic>CheckNewNotes then scans physical (on disk) notes, looking for ones not mentioned in RemoteMetaData, these become uploads.</italic></list-item></list><italic>
</italic><list><list-item dir="ltr"><italic>Next, CheckMetaData() checks MainMetaData for any anomolies and fills in Titles so the report looks sensible</italic></list-item></list><italic>
</italic><list><list-item dir="ltr"><italic>Finally, after Sync, the Local Manifest file is written using data in the MainMetaData.</italic></list-item></list><italic>
While the sync engine if preparing to transfer files, MainMetaData is populated with a record of every note and what action needs to happen to that note.</italic>

The Local Manifest has two parts, firstly a record of notes that have been previously synced (updated at each sync) and secondly, a list of notes that have been deleted and were previously synced. The second part is updated every time a previously synced note is deleted and cleared at the next sync.

<bold>The Process</bold>

TestConnection() checks for a viable Remote and loads LocalMetaData.

<italic>It calls trans.TestConnection that looks for suitable charactistics remotely. It gets the serverID which it stores locally. 
LocalMetaData is populated by ReadLocalManifest() called by TestConnection(), it then contains only notes listed in local manifest, that is previosly as synced ones and ones deleted since last Sync.  Compares ServerID obtained from local manifest with the one obtained by Trans.TestConnection.</italic>

Then we call FileSync.DoSync(). It builds  lists based on Local Manifest, remote manifest and actual local notes. And then a list that will become the new manifest if necessary.

<italic>Specificially, calls LoadRepoData to build NoteMetaData by calling Transport.GetNewNotes() which builds a list of remote notes, perhaps from a remote manifest or by reading the notes directly. In NextCloud sync, reads remote notes and then looks to the (locally stored) remote manifest.</italic>

<bold>Then if routine sync,</bold> looks for both local and remote deletes comparing the two Lists.

<italic>CheckRemoteDeletes() iterates over LocalMetaData (for any except the deleted), these are previously synced but if no longer present in remote must be remotely delete, so mark as SyDeletedLocal so it gets deleted here. If it is present in remote list but has been marked as SyUploadNew it was not origionally there in Remote, so, it must be set to SyDeleteLocal.

looks for it in NoteMetaData and if it finds it there, marks it as SyDeleteLocal, if its not present in NoteMetaData, it makes an entry there and mark it as SyDeleteRemote.</italic>

<bold>But if its a Join,</bold> bit different.  We disregard local manifest if it exists. In FileSync, we reload remote data this time insisting on getting LastChangeDate. Thats because we will compare LCDs for any note that has a matching UID.  NextCloud always provides LCD.

<bold>... still in Join mode. </bold>Scan local actual notes matching UID to UID in Remote List. 
Where a UID exists both locally and in Remote list we have to try and match LCD, on normal tomboy-ng file sync, the LCD is 7 digit after the second decimil point, pretty certain.  In NextCloud, its only one second precision so, somewhat risky. If we match, its SyNothing. (Note that original Tomboy did not examine LCD, if UID's match, then declare a clash.) If we cannot match on LCD, then its a SyClash. 

<bold>Then, all modes,  </bold>
Any local note that does not have an entry in Remote List now is SyUploadNew. 
<italic>CheckNewNotes() reads all notes in local directory, checks for each in Remote List, if not preset, add an entry in Remote List and set it to SyUploadNew</italic>

We then run CheckMetaData() to make sure content now makes sense.  process the note clashes. 

<bold>Actually Run Sync</bold>
<italic>The Remote Manifest now contains a complete plan, every entry should have a action and every necessary action should have an entry. Downloads, writeRemoteManifest (not for nextcloud), DoRemoteDeletes, DoUploads, DoDeleteLocal, WriteLocalManifest. </italic>

<bold>Other Actions</bold>
When a note is deleted (ie not during sync, at user request) TSearchForm.DeleteNote(FullFileName) is called. It updates the in memory record of notes and also updates the main sync Local Manifest if it exists. It will also need to do the same to a NextCloud local mainifest, again, if it exists.

================================= 

<bold>Notes </bold>
If we are only downloading, then no new revision is required, we should copy the current revision not inc for a rewrite of the local manifest, do not write a new remote manifest.

We currently have two functions that write out a local manifest, one that writes at the end of a sync and one that updates the local manifest whenever a local, synced note is deleted. Thats because the WriteLocalManifest() function also does some 'recover' things, I suggest thats now redundant considering we easily rejoin a broken sync connection without the old Tomboy's bad effects of doing so.

We should regard an empty NewRevision in the second case as meaning that we have
• just joined the sync repo or we are making a new repo.
• or we've downloaded but not uploaded.
In either of the (immediate) above, we should read the remote manifest and use what ever its got for us. Remember that a blank NewRevision means don't write an new remote manifest.

<bold>Clash</bold>
We develop a Sync Clash when  the following DOES NOT APPLY - 
a. Its here but not on the server - easy decision
b. Its on the server but not here - easy decision
c. Its has the same change date here and on server - leave 'em alone
d. The note in the local directory is dated before last sync date - must ask user !

So, its a clash when -
* when note exists both locally and on server, (ie, we have to chose) and
* the last change dates are not the same, (ie, we did not put it there)  and
* the local note is more recent than the last sync date.<size:huge>

<bold>Tomboy's Sync Policies</bold></size:huge>
(I  posted to Tomboy's issues list late 2017, it is quite probably is incomplete but sadly prompted no further info. I have updated it a little in light of what I have learnt along the way.)

We like to think that the Ancients had a secret knowledge that we don't have anymore. That does seem to be the case with Tomboy design. The Masters Of Old Tomboy, , worked very hard on a number of points that have made Tomboy as robust and reliable as it is. Sadly, no one thought to summarize those points, we are left to read back over old discussions or reverse engineer the code.

The following is about just that. 

Note that, as mentioned above, Tomboy, during an initial sync, regards a pair of notes with the same UUID as a clash, thats why we used to end up with duplicate notes if rejoining with notes at both ends. tomboy-ng looks at the LastChangeDates and if they are identical, we assume the notes are also identical and don't need syncing. <size:large>

<bold>Sync Model.</bold></size:large>

Broadly, with sync, we have a server and a client. The client is the bit of Tomboy the user sees on his or her desktop. The server may be a Tomboy-web-sync system such as Rainy or Grauphel or may just be a file repository that is somehow shared (Google Drive, Dropbox etc) between systems we sync with. Much of the policy does not care. Here I talk about File Based Sync, tomboy-web-sync is probably similar with a network layer between. And obviously, it has server code to implement this policy.

Every note has a (hopefully) unique ID that identifies it and is also used as its filename. Here we will just call that an ID. A Server may be connected to from multiple clients, any of whom may add, remove or edit a note. It seems to be assumed a client can only ever connect to one server without reconfiguration.
The Sync Repository has a file, manifest.xml that lists all IDs it believes, at the time, should be in a client. It lists a revision number [0..x] for the ID that refers to a directory that contains the most current revision of the note. All revision directories are under a directory called '0', I don't know why nor do I know if that zero can ever change. Thats an outstanding issue. The revision directories also contain a backup manifest file that could potentially be used to recover from an error.

At the client end, there is also a manifest.xml file (in eg $USER/.config/tomboy/.). It contains a last sync date and a server ID. It also lists IDs and revision numbers of notes it has sent to or received from the Server, updated at sync time. Between Syncs, the ID of any locally deleted note is added. Thats how the sync process can tell the difference between a new note introduced to the server from another client and a note that was deleted from this client after the previous sync. I think it makes sense to only list deleted notes that have previously been synced, unnecessary to list ones that were created and then deleted between sync events ? Unnecessary but does no harm ?

There are a number of situations that can happen, in no particular order (remember, its intended to be a REST system) -

<list><list-item dir="ltr"> CaseA - A client makes a new note then syncs. We check that it realy is a new not, ie not present in local manifest. The new note is added to Sync Repo. It's ID now appears in Sync Repo /manifest and a copy of the note is in /0/$RevNo/.</list-item></list>
<list><list-item dir="ltr">CaseB - A client deletes a note (previously synced or not), then syncs. The client moves the note to ~/BackUp/. When syncing, it may observe that the server knows about a note it does not have, so, check local manifest, ah, its been deleted. Tell Server to delete it from whatever previous revision directory it was in. Remove reference to it from local manifest.</list-item></list>
<list><list-item dir="ltr">CaseC - A client, when syncing, gets told about a note it does not have. A bit similar to above but this time the note is not in the deleted list (local manifest) so pulls it down and adopts it locally.</list-item></list>
<list><list-item dir="ltr">CaseD - A client, when syncing, has a note that has been deleted by another client. This is initially similar to case A. We'll assume CaseB ran to completion. The server does not have the note, so before the client kindly offers to upload it, the client checks to see if it has been uploaded or downloaded before by checking the local manifest. If its there, it has been deleted by another client, move to Backup, effectively, delete it locally</list-item></list>
<list><list-item dir="ltr">Pretty obvious how we deal with updates to existing notes, as long as one or the other dates back to the client's last sync. But if both copies have been updated since last client sync date, thats a clash.</list-item></list>

<italic>Note that as of August, 2018, between release of 0.17 and 0.18, it was decided to use the lastes of last-change-date and last-metadata-change-date n the decision making mentioned above. </italic>

<bold>Ref -</bold>
https://bugzilla.gnome.org/show_bug.cgi?id=321037
https://wiki.gnome.org/Apps/Tomboy/Synchronization/IRCLog18May2007
https://wiki.gnome.org/Apps/Tomboy/Synchronization/Brainstorming
"Many weird situations can be avoided by performing an update in three distinct steps: deletes, then updates, then adds." repeated again and again. But not what happens in the code.





</note-content></text>
  <last-change-date>2020-09-09T20:43:04.0281815+10:00</last-change-date>
  <last-metadata-change-date>2020-09-09T20:43:04.0281815+10:00</last-metadata-change-date>
  <create-date>2018-06-23T13:14:34.4600000+10:00</create-date>
  <cursor-position>1</cursor-position>
  <selection-bound-position>1</selection-bound-position>
  <width>1000</width>
  <height>677</height>
  <x>833</x>
  <y>309</y>
  <open-on-startup>False</open-on-startup>
</note>